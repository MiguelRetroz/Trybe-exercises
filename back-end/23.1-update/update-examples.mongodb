// updateOne
use("conteudo_trybe");

db.inventory.updateOne(
  {
    item: "paper",
  },
  {
    $set: {
      "size.uom": "cm",
      status: "P",
    },
  },
);

db.inventory.find();

// updateMany
use("conteudo_trybe");

db.inventory.updateMany(
  {
    "qty": {
      $lt: 50,
    },
  },
  {
    $set: {
      "size.uom": "in",
      status: "P",
    },
  },
);

db.inventory.find();

// $set
use("conteudo_trybe");

db.products.insertOne(
  {
    _id: 100,
    sku: "abc123",
    quantity: 250,
    instock: true,
    reorder: false,
    details: {
      model: "14Q2",
      make: "xyz",
    },
    tags: [ "apparel", "clothing" ],
    ratings: [ { by: "ijk", rating: 4 } ],
  },
);

use("conteudo_trybe");

db.products.update(
  {
    _id: 100,
  },
  {
    $set: {
      quantity: 500,
      details: {
        model: "14Q3",
        make: "xyz",
      },
      tags: [ "coats", "outerwear", "clothing" ],
    },
  },
);

db.products.find();

use("conteudo_trybe");

db.products.update(
  {
    _id: 100,
  },
  {
    $set: {
      "details.make": "zzz",
    },
  },
);

db.products.find();

use("conteudo_trybe");

db.products.update(
  {
    _id: 100,
  },
  {
    $set: {
      "tags.1": "rain gear",
      "ratings.0.rating": 2,
    },
  },
);

db.products.find();

// $mul
use("conteudo_trybe");

db.products.insertOne(
  {
    _id: 1,
    item: "ABC",
    price: NumberDecimal("10.99"),
    qty: 25,
  },
);

db.products.find();

db.products.update(
  {
    _id: 1,
  },
  {
    $mul: {
      price: NumberDecimal("1.25"),
      qty: 2,
    },
  },
);

db.products.find();

use("conteudo_trybe");

db.products.insertOne(
  {
    _id: 2,
    item: "Unknown",
  },
);

db.products.update(
  {
    _id: 2,
  },
  {
    $mul: {
      price: NumberLong("100"),
    },
  },
);

db.products.find();

use("conteudo_trybe");

db.products.insertOne(
  {
    _id: 3,
    item: "Unknown",
    price: NumberLong("10"),
  },
);

db.products.find();

db.products.update(
  {
    _id: 3,
  },
  {
    $mul: {
      price: NumberInt(5)
    },
  },
);

// $inc
use("conteudo_trybe");

db.increment.insertOne(
  {
    _id: 1,
    sku: "abc123",
    quantity: 10,
    metrics: {
      orders: 2,
      ratings: 3.5,
    },
  },
);

db.increment.find();

db.increment.update(
  {
    sku: "abc123",
  },
  {
    $inc: {
      quantity: -2,
      "metrics.orders": 1,
    },
  },
);

db.increment.find();

// $min e $max
use("conteudo_trybe");

db.scores.insertOne(
  {
    _id: 1,
    highScore: 800,
    lowScore: 200,
  },
);

db.scores.find();

// $min
use("conteudo_trybe");

db.scores.update(
  {
    _id: 1,
  },
  {
    $min: {
      lowScore: 150,
    },
  },
);

db.scores.find();

db.scores.update(
  {
    _id: 1,
  },
  {
    $min: {
      lowScore: 250,
    },
  },
);

db.scores.find();

// $max
use("conteudo_trybe");

db.scores.update(
  {
    _id: 1,
  },
  {
    $max: {
      highScore: 950,
    },
  },
);

db.scores.find();

db.scores.update(
  {
    _id: 1,
  },
  {
    $max: {
      highScore: 870,
    },
  },
);

db.scores.find();

// $min e $max em datas
use("conteudo_trybe");

db.tags.insertOne(
  {
    _id: 1,
    desc: "crafts",
    dateEntered: ISODate("2019-10-01T05:00:00Z"),
    dateExpired: ISODate("2019-10-01T16:38:16Z"),
  },
);

db.tags.find();

db.tags.update(
  {
    _id: 1,
  },
  {
    $min: {
      dateEntered: new Date("2019-09-25"),
    },
    $max: {
      dateExpired: new Date("2019-10-02"),
    },
  },
);

db.tags.find();

// $currentDate
use("conteudo_trybe");

db.customers.insertOne(
  {
    _id: 1,
    status: "a",
    lastModified: ISODate("2013-10-02T01:11:18.965Z"),
  },
);

db.customers.find();

db.customers.updateOne(
  {
    _id: 1,
  },
  {
    $currentDate: {
      lastModified: true,
      "cancellation.date": {
        $type: "timestamp",
      },
    },
    $set: {
      "cancellation.reason": "user request",
      status: "D",
    },
  },
);

db.customers.find();

// $rename
use("conteudo_trybe");

db.fruits.insertOne(
  {
    _id: 100,
    name: "Banana",
    quantity: 100,
    inStock: true,
  },
);

db.fruits.find();

db.fruits.updateOne(
  {
    name: "Banana",
  },
  {
    $rename: {
      "name": "productName",
    },
  },
);

db.fruits.find();

// $unset
use("conteudo_trybe");

db.fruits.updateMany(
  {
    productName: "Banana",
  },
  {
    $unset: {
      quantity: ""
    },
  },
);

db.fruits.find();